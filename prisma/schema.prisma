// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ?Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum UserRole {
    BASE
    HRADMIN
    SUPERADMIN
}

model User {
    id             String        @id @default(cuid())
    name           String?
    email          String        @unique
    password       String
    emailVerified  DateTime?
    image          String?
    role           UserRole?     @default(BASE)
    accounts       Account[]
    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?

    @@index([email])
}

model Organization {
    id           String        @id @default(cuid())
    name         String
    description  String?       @db.Text
    maxSize      Int
    subscription Subscription?
    members      User[]
}

model Module {
    id          String         @id @default(cuid())
    name        String         @unique
    description String?        @db.Text
    features    String[]
    price       Float
    dependsOn   Module[]       @relation("ModuleDependencies")
    dependedBy  Module[]       @relation("ModuleDependencies")
    subscribers Subscription[]
}

enum SubscriptionType {
    YEARLY
    MONTHLY
}

model Subscription {
    id               String            @id @default(cuid())
    organization     Organization      @relation(fields: [organizationId], references: [id])
    organizationId   String            @unique
    modules          Module[]
    paymentCompleted DateTime?
    startingDate     DateTime
    endDate          DateTime
    autoRenewal      Boolean
    type             SubscriptionType? @default(MONTHLY)
}
